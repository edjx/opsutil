name: Droplet Cleanup Stopper

on:
  schedule:
    # Runs "at UTC 23:00 on Wednesday" (see https://crontab.guru)
    - cron: "0 23 * * 3"
  workflow_dispatch:

jobs:
  stack:
    name: Get Droplet List
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup GOOS specific build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gobuild-

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.18.0"
          check-latest: true
      - run: cd doddl; go install -v .
      - name: Install Slack Notify
        run: go install -v github.com/technosophos/slack-notify@latest
      - name: Digital Ocean Auth
        uses: digitalocean/action-doctl@v2.1.0
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Stop Instances
        id: stop
        run: |
          export DO_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          export SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}
          export SLACK_MESSAGE=$(echo "List of instance to be shutdown:"; echo ""; echo "";)
          slack-notify
          export SLACK_MESSAGE=$( echo '```'; doddl -l no-whitelist -j | jq -r '(.[] | [.ip, "||", .name]) | @tsv'; echo '```' )
          slack-notify
          for i in $(doddl -l no-whitelist -j | jq '.[].id'); do doctl compute droplet-action power-off $i; done
